Q
What happens when you initialize a repository? Why do you need to do it?
A
You initialize a repository stores a hidden .git file in the directory.  this file will helps to ultimatley track the various commits that happen in a responsitory

Q
How is the staging area different from the working directory and the repository?
A 
Staging area provides a temporay location to put file toward when about to add a committ

Q
What value do you think it offers?
A 
It allows you to certain of the files that will be put toward a committ (sort of like reviewing your order before finalizing)


Q
How can you use the staging area to make sure you have one commit per logical
change?
A
Git Diff (with No ID) = Shows differences between Working Directory and Stagin Area (i.e. stuff working on vs about to be staged) 
Git Diff --staged = shows changes between Staging Area and Repository (stuff staged vs stuff committed )
Git Diff ID 1 & ID2 = Shows changes between 2 commits that are IN the reporsioray (stuff commited of some id...vs stuff committed on another id)
For purpose of verifying what your about to committ...the 2nd is useful;

Q
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
A: 
Branches are helpful when trying something out that might not go anywhere, and unsure will be tracked.  
Branches ensure the master version doesn't get polluted



How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?